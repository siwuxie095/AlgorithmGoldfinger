package com.siwuxie095.algorithm.chapter0th.example10th;

/**
 * @author Jiajing Li
 * @date 2021-08-18 08:31:38
 */
public class Main {

    /**
     * 回溯算法详解
     *
     *
     * 解决⼀个回溯问题，实际上就是⼀个决策树的遍历过程。你只需要思考 3 个问题：
     * 1、路径：也就是已经做出的选择。
     * 2、选择列表：也就是你当前可以做的选择。
     * 3、结束条件：也就是到达决策树底层，⽆法再做选择的条件。
     *
     * 如果你不理解这三个词语的解释，没关系，后续会⽤「全排列」和「N 皇后问题」这两个经典的回溯算法问题
     * 来帮你理解这些词语是什么意思，现在先留个印象。
     *
     * 代码⽅⾯，回溯算法的框架：
     *
     * result = []
     * def backtrack(路径, 选择列表):
     *     if 满足结束条件:
     *         result.add(路径)
     *         return
     *
     *     for 选择 in 选择列表:
     *         做选择
     *         backtrack(路径, 选择列表)
     *         撤销选择
     *
     * 其核⼼就是 for 循环⾥⾯的递归，在递归调⽤之前「做选择」，在递归调⽤之后「撤销选择」，特别简单。
     *
     * 什么叫做选择和撤销选择呢，这个框架的底层原理是什么呢？后续将通过「全排列」这个问题来解开之前的
     * 疑惑，详细探究⼀下其中的奥妙！
     */
    public static void main(String[] args) {

    }

}
