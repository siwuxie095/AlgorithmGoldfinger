package com.siwuxie095.algorithm.chapter0th.example19th;

/**
 * @author Jiajing Li
 * @date 2021-08-21 14:07:25
 */
public class Main {

    /**
     * 二分搜索解题套路框架
     *
     * 先给⼤家讲个笑话乐呵⼀下：
     *
     * 有⼀天阿东到图书馆借了 N 本书，出图书馆的时候，警报响了，于是保安把阿东拦下，要检查⼀下哪本书没有登记出借。
     * 阿东正准备把每⼀本书在报警器下过⼀下，以找出引发警报的书，但是保安露出不屑的眼神：你连⼆分查找都不会吗？于
     * 是保安把书分成两堆，让第⼀堆过⼀下报警器，报警器响；于是再把这堆书分成两堆…… 最终，检测了 logN 次之后，
     * 保安成功的找到了那本引起警报的书，露出了得意和嘲讽的笑容。于是阿东背着剩下的书⾛了。
     *
     * 从此，图书馆丢了 N - 1 本书。
     *
     * ⼆分查找并不简单，Knuth ⼤佬（发明 KMP 算法的那位）都说⼆分查找：思路很简单，细节是魔⿁。很多⼈喜欢拿
     * 整型溢出的 bug 说事⼉，但是⼆分查找真正的坑根本就不是那个细节问题，⽽是在于到底要给 mid 加⼀还是减⼀，
     * while ⾥到底⽤ <= 还是 <。
     *
     * 你要是没有正确理解这些细节，写⼆分肯定就是⽞学编程，有没有 bug 只能靠菩萨保佑。
     *
     * 这里就来探究⼏个最常⽤的⼆分查找场景：寻找⼀个数、寻找左侧边界、寻找右侧边界。⽽且要深⼊细节，⽐如不等号
     * 是否应该带等号，mid 是否应该加⼀等等。分析这些细节的差异以及出现这些差异的原因，保证你能灵活准确地写出
     * 正确的⼆分查找算法。
     */
    public static void main(String[] args) {

    }

}
