package com.siwuxie095.algorithm.chapter0th.example35th;

/**
 * @author Jiajing Li
 * @date 2021-08-22 16:40:36
 */
public class Main {

    /**
     * 学习算法的方法论
     *
     * 学算法也好，学技术也好，做任何事情，一定要明白自己的目标是什么。
     *
     * 这句话有两个关键词，第一个关键词是「目标」，可以量化的才叫目标。
     *
     * 你想变有钱，想学好算法，这就叫无法量化的目标，有多少钱才算有钱，学到什么程度才算学好？量化的一个
     * 最大的特点是可以拆分。
     *
     * 比如说目标是进大厂，计划半年内刷 300 道题，那这可以反向拆分，每个月刷 50 道，工作日每天刷两道，
     * 休息日每天刷一道，再细化，每天几点到几点固定为刷题时间，期间屏蔽所有应用通知，专心做题思考；然后
     * 每天反省刷题计划是否达标，如果没达标，是为什么，怎么弥补。
     *
     * 这就是计算机的递归思维，自顶向下，逐步求精，反向求解。这里很多动态规划相关的题目，基本都是先写
     * 自顶向下的递归解法，然后改写成自底向上的迭代解法，因为递归思路清晰嘛。
     *
     * 自顶向下的思维显得有条理，清楚地知道自己下一分钟要干什么，自底向上的思维就有些眉毛胡子一把抓的
     * 感觉，你说谁对时间的利用效率高呢？
     *
     * 如果把这种根据目标来反向拆分的方法用到生活学习中，你就像个算法一样精确地按照既定的逻辑向目标逼近，
     * 攻城拔寨，好似人群中混进了个 AlphaGo，还愁达不到自己的目的？
     *
     * 第二个关键词是「明白」，不是说今天热血沸腾给自己制定计划，结果做着做着就被带偏了，真的明白应该是
     * 你每时每刻，每分每秒都明白目标是什么。
     *
     * 这里指的被带偏不是说学着学着跑去刷抖音了，这种问题可以通过物理隔离等方法避免，这里说的带偏是指
     * 方向跑偏。
     *
     * 比如说做英语阅读理解，见到一个不认识的词，就去查，这个过程中又见到十个不认识的词，然后又去查，
     * 结果一个小时过去了，查了不少单词，但是文章没读几句，题还没做。
     *
     * 你说他没学习，倒也认真学了，但是学着学着方向跑偏了，最后挂科了。
     *
     * 这就是没搞明白目标是啥，这种 DFS 查单词的事情，应该是背单词的时候去做，现在做阅读题呢，目标是
     * 快速理解文章内容，选出正确答案嘛。那么几个生僻词汇，影响你对全文内容的掌握吗？
     *
     * 说回学算法，每个人的自身处境不同，需求不同，就应该有不同的学习策略，就像背单词和做阅读两个场景
     * 采取两种策略一样。
     *
     * 从个人的角度，学算法，也要时时刻刻「明白」自己想要的是啥。
     *
     * 如果目标就是从事算法相关的理论研究工作，去啃《算法导论》这种理论性很强的教材完全没问题，反正你
     * 还要在学术的路上走很多年，花上一两年打基础性价比挺高。
     *
     * 如果目标是找工作赚钱，那算法就起到个筛选作用，没必要啃大部头，这里的风格就是你需要的。从各种算法
     * 的模板练起，边看边刷，总共可以刷掉将近两百题，国内大厂过算法关没什么问题。节约下来的时间，干点别
     * 的不香吗？
     *
     * 人的精力真的是有限的，把每分每秒都压在刀刃上，才能更快达成目标不是么。
     *
     * 当然，不论选择什么，定好目标后都要仔细拆分，严格执行，这个就看个人的执行力了。
     *
     * 这里写了些方法论层面的东西，主要希望大家搞清楚自己学习的目标，制定自己的计划，有自己的思考。不要
     * 被乱七八糟的建议牵着鼻子走，今天查一个单词，明天查一个单词，结果到头来挂科了。
     */
    public static void main(String[] args) {

    }

}
